// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: srsmgmt.proto

package srsmgmt_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SrsMgmtClient is the client API for SrsMgmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrsMgmtClient interface {
	GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamReply, error)
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamReply, error)
	DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*DeleteStreamReply, error)
}

type srsMgmtClient struct {
	cc grpc.ClientConnInterface
}

func NewSrsMgmtClient(cc grpc.ClientConnInterface) SrsMgmtClient {
	return &srsMgmtClient{cc}
}

func (c *srsMgmtClient) GetStream(ctx context.Context, in *GetStreamRequest, opts ...grpc.CallOption) (*GetStreamReply, error) {
	out := new(GetStreamReply)
	err := c.cc.Invoke(ctx, "/pb.SrsMgmt/GetStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srsMgmtClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamReply, error) {
	out := new(CreateStreamReply)
	err := c.cc.Invoke(ctx, "/pb.SrsMgmt/CreateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srsMgmtClient) DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (*DeleteStreamReply, error) {
	out := new(DeleteStreamReply)
	err := c.cc.Invoke(ctx, "/pb.SrsMgmt/DeleteStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrsMgmtServer is the server API for SrsMgmt service.
// All implementations must embed UnimplementedSrsMgmtServer
// for forward compatibility
type SrsMgmtServer interface {
	GetStream(context.Context, *GetStreamRequest) (*GetStreamReply, error)
	CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamReply, error)
	DeleteStream(context.Context, *DeleteStreamRequest) (*DeleteStreamReply, error)
	mustEmbedUnimplementedSrsMgmtServer()
}

// UnimplementedSrsMgmtServer must be embedded to have forward compatible implementations.
type UnimplementedSrsMgmtServer struct {
}

func (UnimplementedSrsMgmtServer) GetStream(context.Context, *GetStreamRequest) (*GetStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedSrsMgmtServer) CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedSrsMgmtServer) DeleteStream(context.Context, *DeleteStreamRequest) (*DeleteStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStream not implemented")
}
func (UnimplementedSrsMgmtServer) mustEmbedUnimplementedSrsMgmtServer() {}

// UnsafeSrsMgmtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrsMgmtServer will
// result in compilation errors.
type UnsafeSrsMgmtServer interface {
	mustEmbedUnimplementedSrsMgmtServer()
}

func RegisterSrsMgmtServer(s grpc.ServiceRegistrar, srv SrsMgmtServer) {
	s.RegisterService(&SrsMgmt_ServiceDesc, srv)
}

func _SrsMgmt_GetStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrsMgmtServer).GetStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SrsMgmt/GetStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrsMgmtServer).GetStream(ctx, req.(*GetStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrsMgmt_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrsMgmtServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SrsMgmt/CreateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrsMgmtServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SrsMgmt_DeleteStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrsMgmtServer).DeleteStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SrsMgmt/DeleteStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrsMgmtServer).DeleteStream(ctx, req.(*DeleteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SrsMgmt_ServiceDesc is the grpc.ServiceDesc for SrsMgmt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrsMgmt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SrsMgmt",
	HandlerType: (*SrsMgmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStream",
			Handler:    _SrsMgmt_GetStream_Handler,
		},
		{
			MethodName: "CreateStream",
			Handler:    _SrsMgmt_CreateStream_Handler,
		},
		{
			MethodName: "DeleteStream",
			Handler:    _SrsMgmt_DeleteStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "srsmgmt.proto",
}
